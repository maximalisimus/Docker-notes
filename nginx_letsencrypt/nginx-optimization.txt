

https://struchkov.dev/blog/ru/nginx-optimization/

$ sudo nano /etc/nginx/nginx.conf


http {
	client_max_body_size 100M;
	client_body_buffer_size 256k;
	proxy_max_temp_file_size 0;

...

}

Эти строки устанавливают максимальный размер тела запроса, 
размер буфера тела запроса клиента и размер временного файла, 
создаваемого nginx при передаче данных.



Сжатие GZIP

http {
  ...

    gzip                on;
    gzip_min_length     500;
    gzip_vary           on;
    gzip_proxied        expired no-cache no-store private auth;
    gzip_types          text/plain text/css text/javascript application/javascript application/x-javascript text/xml application/xml application/xml+rss application/json;
    gzip_disable        "msie6";
    gzip_comp_level 6;
    gzip_buffers 16 8k;

  ...
}


gzip включает сжатие.

gzip_min_length устанавливает минимальную длину ответов, для которых будет применяться сжатие. По умолчанию 20, но имеет смысл поставить больше, так как постоянное сжатие приводит к повышению нагрузки на процессоры сервера и клиента.

gzip_vary - позволяет кэшировать как сжатые, так и обычные версии ресурса.

gzip_proxied Разрешает или запрещает сжатие ответа методом gzip для проксированных запросов в зависимости от запроса и ответа. То, что запрос проксированный, определяется на основании наличия поля “Via” в заголовке запроса. В директиве можно указать одновременно несколько параметров.

-------------------------------------------

Параметры gzip_proxied

off запрещает сжатие для всех проксированных запросов, игнорируя остальные параметры;

expired разрешает сжатие, если в заголовке ответа есть поле “Expires” со значением, запрещающим кэширование;

no-cache разрешает сжатие, если в заголовке ответа есть поле “Cache-Control” с параметром “no-cache”;

no-store разрешает сжатие, если в заголовке ответа есть поле “Cache-Control” с параметром “no-store”;

private разрешает сжатие, если в заголовке ответа есть поле “Cache-Control” с параметром “private”;

no_last_modified разрешает сжатие, если в заголовке ответа нет поля “Last-Modified”;

no_etag разрешает сжатие, если в заголовке ответа нет поля “ETag”;

auth разрешает сжатие, если в заголовке запроса есть поле “Authorization”;

any разрешает сжатие для всех проксированных запросов.

-------------------------------------------

gzip_types по умолчанию включено сжатие для ответов типа текст. В данном параметре можно перечислить все необходимые типы ответов.

gzip_disable запрещает для перечисленных параметров заголовка User-Agent сжатие. В данном примере для Internet Explorer 6 сжатие применяться не будет, так как данный браузер не умеет принимать сжатые ответы.



Кэширование на стороне клиента

server {
  ...

    # Media
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|mp4|ogg|ogv|webm|htc)$ {
        expires 30d;
    }

    # CSS and Js
    location ~* \.(css|js|woff2)$ {
        expires 365d;
    }

  ...
}

Кэширование на стороне сервера

sudo mkdir -p /var/nginx/cache

nginx.conf

http {
    proxy_cache_path /var/nginx/cash levels=1:2 keys_zone=nginxcash:60m max_size=256m inactive=24h;
    proxy_cache_key "$scheme$request_method$host$request_uri";
    proxy_cache_methods GET HEAD;
    proxy_cache_min_uses 2;
}

proxy_cache_path указывает путь в файловой системе. Также этот параметр позволяет задать

Не кэшируйте HTTP-ответы при первом обращении. Используйте proxy_cache_min_uses 2, чтобы кэшировать только те элементы, к которым обращались более одного раза. Таким образом, вы уменьшите нагрузку прокси-кэша на запись и предотвратите заполнение кэша содержимым, к которому редко обращаются.

Ключ кэширования Nginx по умолчанию не очень хорошо работает с сайтами с несколькими поддоменами. Вы можете настроить ключ кэширования, задав proxy_cache_key. В своей конфигурации я использую вот такой ключ:

proxy_cache_key $scheme$host$uri$is_args$args;




Переносим кэш Nginx в RAM

Можно значительно ускорить кэш, если смонтировать его не в файловую систему а в RAM.

Для этого также создаем папку для кэша, можно использовать ту же, но ее нужно очистить от папок. Далее монтируем созданный каталог в RAM с помощью команды tmpfs, выделяя 256 мегабайт под кэш:

sudo mount -t tmpfs -o size=256M tmpfs /var/nginx/cache
Если вам понадобиться отключить RAM-кеш, просто выполните команду:

sudo umount /var/nginx/cache
Чтобы автоматически пересоздать каталог кеша в RAM после перезагрузки, нам нужно обновить файл /etc/fstab. Добавьте в него следующую строку:

tmpfs /var/nginx/cache tmpfs defaults,size=256M 0 0





Оптимизация работы с файлами

http {
  ...
    sendfile      on;
    aio           on;
    tcp_nopush    on;

    open_file_cache max=100000 inactive=20s;
    open_file_cache_valid 45s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    ...
}

sendfile позволяет использовать более совершенный системный вызов, который обеспечивает прямую передачу файла, то есть без системных вызовов read + write.

aio включает использование асинхронного обращения к файлам, что избавит от очередей запросов.

tcp_nopush позволит передавать заголовок ответа и начало файла в одном пакете.

open_file_cache по умолчанию выключена. Задает настройку для кэширования информации о файлах, с которыми работает nginx. По умолчанию выключено.

open_file_cache_valid задает время, через которое веб-сервер будет проверять актуальность данных. По умолчанию 60 секунд.

open_file_cache_min_uses задает минимальное число обращений к файлу, чтобы дескриптор файла оставался открытым в кэше.

open_file_cache_errors включает или выключает кэширование ошибок.





Оптимизация журнала доступа

http {
   access_log off;
}

Если необходимо вести журнал доступа, включите буферизацию журнала доступа. Это позволит Nginx буферизировать серию записей журнала и записывать их в файл журнала одновременно, вместо того чтобы выполнять различные операции записи для каждого запроса.

Есть два тригера для записи в файл, которые можно использовать одновременно:

если следующая строка лога не помещается в буфер
если данные в буфере старше, чем указано в параметре flush.
Чтобы настроить буфер, нам просто нужно добавить параметры buffer и flush с соответствующим значением в директиве access_log:

nginx / {
    ...
    access_log /var/log/nginx/fast_api.log combined buffer=256k flush=10s;
    error_log /var/log/nginx/fast_api.err.log;
}
Таким образом, согласно приведенной выше конфигурации, изначально журналы доступа будут записываться в буфер и сохраняться на диск только тогда, когда размер буфера достигнет 256 КБ или буферизованные данные станут старше 10 секунд.





X-XSS-Protection

Заголовок X-XSS-Protection может предотвратить некоторые XSS-атаки.

Вы можете реализовать защиту XSS, используя три варианта в зависимости от конкретной потребности.

X-XSS-Protection: 0; Это полностью отключит фильтр
X-XSS-Protection: 1; Это включает фильтр, но очищает только потенциально вредоносные скрипты
X-XSS-Protection: 1; mode = block; Это включает фильтр и полностью блокирует страницу.

server {
  ...

  add_header X-XSS-Protection "1; mode=block";

  ...
}





X-Frame-Options

Заголовок X-Frame-Options позволяет снизить уязвимость вашего сайта для clickjacking-атак. Этот заголовок служит инструкцией для браузера не загружать вашу страницу в frame/iframe. Не все браузеры поддерживают этот вариант.

Настроить X-Frame-Options можно тремя способами:

DENY: это полностью отключит функции iframe.
SAMEORIGIN: iframe может использоваться только кем-то из того же источника.
ALLOW-FROM: Это позволит размещать страницы в окнах iframe только с определенных URL-адресов.

server {
  ...

  add_header X-Frame-Options "DENY";

  ...
}





X-Permitted-Cross-Domain-Policies

Аналогично механизму браузеров блокировки стороннего контента Adobe Flash имеет свой. Он регулируется файлами crossdomain.xml сайта, начиная с корневого каталога. Проблема с механизмом в том, что на любом уровне вложенности корневой регулирующий файл (политика безопасности) может быть переопределен. Чтобы избежать таких ситуаций, необходимо задать этот HTTP-заголовок.

Доступно несколько вариантов настройки:

none - никакая политика не допускается
master-only - разрешить только главную политику
all - все позволено
by-content-only - Разрешить только определенный тип контента. Пример - XML
by-ftp-only - применимо только для FTP-сервера
server {
  ...

  add_header X-Permitted-Cross-Domain-Policies master-only;

  ...
}






Strict-Transport-Security

Заголовок Strict-Transport-Security запрещает использование незащищенного HTTP соединения на сайте, если есть защищенное HTTPS.

server {
  ...

  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

  ...
}





X-Content-Type-Options

Рейтинг наиболее опасных к использованию возможностей браузера возглавляет возможность Internet Explorer «угадывать» тип файла, игнорируя его MIME-тип.

При передаче от сервера к браузеру все файлы имеют тот или иной тип, который прямо указывает на суть содержимого файла. Однако, Internet Explorer имеет встроенный механизм, который позволяет по-содержимому файла переопределить его тип.

Таким образом, обычные текстовые файлы могут быть интерпретированы как JavaScript со всеми вытекающими последствиями. Например, если у вас на сайте запрещена загрузка текстовых файлов с расширениями .js пользователями, то они могут загрузить в виде картинок текстовый файл, содержащий JavaScript-код, который может быть исполнен браузером.

server {
  ...

  add_header X-Content-Type-Options nosniff;

  ...
}










