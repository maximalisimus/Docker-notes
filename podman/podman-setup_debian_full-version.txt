

podman is a tool for managing (Kubernetes) pods, containers and container images, available from https://github.com/containers/libpod

To install podman from scratch in Debian/ubuntu we need to have the below requirement met

golang >= 1.8 (stretch+)
docker-runc
conmon
CNI networking
ostree (Packaged)
libapparmor-dev

1) $ apt -y update

2) $ apt -y install \
  vim \
  curl \
  gcc \
  make \
  cmake \
  git \
  btrfs-progs \
  golang-go \
  go-md2man \
  iptables \
  libassuan-dev \
  libc6-dev \
  libdevmapper-dev \
  libglib2.0-dev \
  libgpgme-dev \
  libgpg-error-dev \
  libostree-dev \
  libprotobuf-dev \
  libprotobuf-c-dev \
  libseccomp-dev \
  libselinux1-dev \
  libsystemd-dev \
  pkg-config \
  runc \
  uidmap \
  libapparmor-dev

3) check the runc version

root@test:~# runc -version
runc version spec: 1.0.1-dev

4) install GOLANG

mkdir ~/go
nano ~/.bashrc

export GOPATH=~/go
export PATH=$GOPATH/bin:$PATH:/$HOME/.local/bin/
source ~/.bashrc

mkdir -p ~/.config/systemd/user/

git clone https://go.googlesource.com/go $GOPATH
cd $GOPATH
git checkout tags/go1.10.8  # optional
cd src
./all.bash
export PATH=$GOPATH/bin:$PATH

5) conmon is used to monitor OCI Runtimes. To build from source, use the following:

cd ~
git clone https://github.com/containers/conmon
cd conmon
export GOCACHE="$(mktemp -d)"
make
sudo make podman
sudo cp /usr/local/libexec/podman/conmon  /usr/local/bin/

6) Configure CNI

A basic network configuration can be achieved with:

sudo mkdir -p /etc/cni/net.d
curl -qsSL https://raw.githubusercontent.com/containers/libpod/master/cni/87-podman-bridge.conflist | sudo tee /etc/cni/net.d/87-podman-bridge.conf

7) Install CNI Plugins

cd ~
git clone https://github.com/containernetworking/plugins.git $GOPATH/src/github.com/containernetworking/plugins
cd $GOPATH/src/github.com/containernetworking/plugins
./build_linux.sh
sudo mkdir -p /usr/libexec/cni
sudo cp bin/* /usr/libexec/cni

Others Directories where the CNI plugin binaries may be located

cni_plugin_dir = [
"/usr/libexec/cni",
"/usr/lib/cni",
"/usr/local/lib/cni",
"/opt/cni/bin"
]

8) Add Podman configuration registries,policy

cd ~
sudo mkdir -p /etc/containers
sudo curl https://raw.githubusercontent.com/projectatomic/registries/master/registries.fedora -o /etc/containers/registries.conf
sudo curl https://raw.githubusercontent.com/containers/skopeo/master/default-policy.json -o /etc/containers/policy.json

9) Install PODMAN

PODMAN:

sudo su

echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_10/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/Debian_10/Release.key -O- | apt-key add -

echo 'deb http://deb.debian.org/debian buster-backports main' >> /etc/apt/sources.list
echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_10/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_10/Release.key | sudo apt-key add -
exit
sudo apt-get update
sudo apt-get -y -t buster-backports install libseccomp2
sudo apt install podman buildah -y

or

cd ~
git clone https://github.com/containers/libpod/ $GOPATH/src/github.com/containers/libpod
cd $GOPATH/src/github.com/containers/libpod
make BUILDTAGS="selinux seccomp"
sudo make install PREFIX=/usr

PODMAN-COMPOSE:

sudo apt install python3-pip

pip3 install podman-compose

or

pip3 install https://github.com/containers/podman-compose/archive/devel.tar.gz

or

curl -o /usr/local/bin/podman-compose https://raw.githubusercontent.com/containers/podman-compose/devel/podman_compose.py
chmod +x /usr/local/bin/podman-compose

FEDORA:

sudo dnf install podman-compose

COCKPIT-PODMAN:

sudo apt install cockpit -y

sudo systemctl enable cockpit
sudo systemctl start cockpit
sudo systemctl enable --now cockpit.socket
sudo systemctl start cockpit.socket

sudo firewall-cmd --add-service=cockpit
sudo firewall-cmd --add-service=cockpit --permanent

COCKPIT-PODMAN AND COCKPIT-BRIDGE:

echo 'deb http://ftp.de.debian.org/debian sid main' > /etc/apt/sources.list.d/ftp.de.debian.org.list
echo 'deb http://ftp.de.debian.org/debian buster-backports main' >> /etc/apt/sources.list.d/ftp.de.debian.org.list

sudo apt install cockpit-podman cockpit-bridge

10) 

$ sudo usermod --add-subuids 10000-75535 USERNAME
$ sudo usermod --add-subgids 10000-75535 USERNAME

$ sudo nano /etc/sysctl.conf

kernel.unprivileged_userns_clone=1

$ sudo sysctl -p

$ sudo loginctl enable-linger USERNAME

Docker Compose.

$ sudo ln -sf /var/run/podman.sock /var/run/docker.sock
$ sudo systemctl enable --now podman.socket
$ systemctl --user enable --now podman.socket

11) Test Podman

podman help

Запуск и проверка cockpit

sudo systemctl status cockpit

Browser
https://ip:9090
The SSL certificate to self signed is CORRECT.









