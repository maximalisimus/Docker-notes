

podman is a tool for managing (Kubernetes) pods, containers and container images, available from https://github.com/containers/libpod

To install podman from scratch in Debian/ubuntu we need to have the below requirement met

golang >= 1.8 (stretch+)
docker-runc
conmon
CNI networking
ostree (Packaged)
libapparmor-dev

1) $ apt -y update

2) $ apt -y install \
  vim \
  curl \
  gcc \
  make \
  cmake \
  git \
  btrfs-progs \
  golang-go \
  go-md2man \
  iptables \
  libassuan-dev \
  libc6-dev \
  libdevmapper-dev \
  libglib2.0-dev \
  libgpgme-dev \
  libgpg-error-dev \
  libostree-dev \
  libprotobuf-dev \
  libprotobuf-c-dev \
  libseccomp-dev \
  libselinux1-dev \
  libsystemd-dev \
  pkg-config \
  runc \
  uidmap \
  libapparmor-dev

3) check the runc version

root@test:~# runc -version
runc version spec: 1.0.1-dev

4) install GOLANG

mkdir ~/go
nano ~/.bashrc

export GOPATH=~/go
export PATH=$GOPATH/bin:$PATH:/$HOME/.local/bin/
source ~/.bashrc

mkdir -p ~/.config/systemd/user/

git clone https://go.googlesource.com/go $GOPATH
cd $GOPATH
git checkout tags/go1.10.8  # optional
cd src
./all.bash

5) conmon is used to monitor OCI Runtimes. To build from source, use the following:

cd ~
git clone https://github.com/containers/conmon
cd conmon
export GOCACHE="$(mktemp -d)"
make
sudo make podman
sudo cp /usr/local/libexec/podman/conmon  /usr/local/bin/

6) Configure CNI

A basic network configuration can be achieved with:

sudo mkdir -p /etc/cni/net.d
curl -qsSL https://raw.githubusercontent.com/containers/libpod/master/cni/87-podman-bridge.conflist | sudo tee /etc/cni/net.d/87-podman-bridge.conf

7) Install CNI Plugins

cd ~
git clone https://github.com/containernetworking/plugins.git $GOPATH/src/github.com/containernetworking/plugins
cd $GOPATH/src/github.com/containernetworking/plugins
./build_linux.sh
sudo mkdir -p /usr/libexec/cni
sudo cp bin/* /usr/libexec/cni

sudo find "/usr/libexec/cni/" -type f -exec ln -sf {} /usr/local/bin/ \;

Others Directories where the CNI plugin binaries may be located

cni_plugin_dir = [
"/usr/libexec/cni",
"/usr/lib/cni",
"/usr/local/lib/cni",
"/opt/cni/bin"
]

8) Add Podman configuration registries,policy

cd ~
sudo mkdir -p /etc/containers
sudo curl https://raw.githubusercontent.com/projectatomic/registries/master/registries.fedora -o /etc/containers/registries.conf
sudo curl https://raw.githubusercontent.com/containers/skopeo/master/default-policy.json -o /etc/containers/policy.json

9) Install PODMAN

PODMAN:

sudo su

echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_10/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/Debian_10/Release.key -O- | apt-key add -

echo 'deb http://deb.debian.org/debian buster-backports main' >> /etc/apt/sources.list
echo 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_10/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_10/Release.key | sudo apt-key add -
exit
sudo apt-get update
sudo apt-get -y -t buster-backports install libseccomp2
sudo apt install podman buildah -y

or

cd ~
git clone https://github.com/containers/libpod/ $GOPATH/src/github.com/containers/libpod
cd $GOPATH/src/github.com/containers/libpod
make BUILDTAGS="selinux seccomp"
sudo make install PREFIX=/usr

PODMAN-COMPOSE:

sudo apt install python3-pip

pip3 install podman-compose

or

pip3 install https://github.com/containers/podman-compose/archive/devel.tar.gz

or

curl -o /usr/local/bin/podman-compose https://raw.githubusercontent.com/containers/podman-compose/devel/podman_compose.py
chmod +x /usr/local/bin/podman-compose

FEDORA:

sudo dnf install podman-compose

COCKPIT-PODMAN:

echo 'deb http://ftp.de.debian.org/debian sid main' > /etc/apt/sources.list.d/ftp.de.debian.org.list
echo 'deb http://ftp.de.debian.org/debian buster-backports main' >> /etc/apt/sources.list.d/ftp.de.debian.org.list

# sudo apt install cockpit-podman cockpit-bridge

sudo apt install cockpit -y

sudo usermod -aG adm,users USERNAME

# sudo systemctl enable cockpit
# sudo systemctl start cockpit
sudo systemctl enable --now cockpit.socket
sudo systemctl start cockpit.socket

sudo apt install cockpit-podman -y
sudo systemctl restart cockpit
sudo systemctl restart cockpit.socket


If you want to replace Docker, one can install podman-docker to mimic the docker binary along with man pages.
Если вы хотите заменить Docker, можно установить podman-docker, чтобы имитировать двоичный файл docker вместе со многими страницами.

# echo 'deb http://ftp.de.debian.org/debian sid main' > /etc/apt/sources.list.d/ftp.de.debian.org.list
sudo apt install podman-docker -y



Storage
Место хранения

The configuration for how and where container images and instances are stored takes place in /etc/containers/storage.conf.
Настройка того, как и где хранятся изображения и экземпляры контейнеров, выполняется в /etc/containers/storage.conf.

Set the driver according to the filesystem in use for the storage location (see containers-storage.conf(5) § STORAGE_TABLE).
Установите драйвер в соответствии с файловой системой, используемой для хранилища (https://man.archlinux.org/man/containers-storage.conf.5#STORAGE_TABLE).


$ mkdir -p $HOME/.local/share/containers/storage $HOME/.config/containers/
$ curl https://raw.githubusercontent.com/projectatomic/registries/master/registries.fedora -o $HOME/.local/share/containers/registries.conf
$ curl https://raw.githubusercontent.com/containers/skopeo/master/default-policy.json -o $HOME/.local/share/containers/policy.json
# cat /etc/containers/storage.conf | grep -Evi "^#" | awk '!/^$/{print $0}'
$ nano $HOME/.config/containers/storage.conf

[storage]
driver = "overlay"
graphroot="$HOME/.local/share/containers/storage"
runroot="$XDG_RUNTIME_DIR/containers"

[storage.options]
additionalimagestores = [
]

[storage.options.overlay]
mountopt = "nodev,metacopy=on"

[storage.options.thinpool]



DNSNAME.

If you are using AppArmor you might end up with problems when creating container using a bridge network with the dnsname plugin enabled:
Если вы используете AppArmor, у вас могут возникнуть проблемы при создании контейнера с использованием мостовой сети с включенным подключаемым модулем dns-имен:


This can be solved by adding the following lines to:
$ sudo nano /etc/apparmor.d/local/usr.sbin.dnsmasq

owner /run/user/[0-9]*/containers/cni/dnsname/*/dnsmasq.conf r,
owner /run/user/[0-9]*/containers/cni/dnsname/*/addnhosts r,
owner /run/user/[0-9]*/containers/cni/dnsname/*/pidfile rw,

or

/run/containers/cni/dnsname/*/dnsmasq.conf r,
/run/containers/cni/dnsname/*/addnhosts r,
/run/containers/cni/dnsname/*/pidfile rw,

$ sudo apparmor_parser -R /etc/apparmor.d/usr.sbin.dnsmasq
# sudo apparmor_parser /etc/apparmor.d/usr.sbin.dnsmasq
# sudo apparmor_parser -r /etc/apparmor.d/usr.sbin.dnsmasq

To get hostname resolution between containers running install podman-dnsname.
Чтобы получить разрешение имени хоста между запущенными контейнерами, установите podman-dnsname.

sudo find "/usr/libexec/cni/" -type f -exec ln -sf {} /usr/local/bin/ \;

Configure a CNI network for Podman

$ podman network create foobar
$ nano /home/user/.config/cni/net.d/foobar.conflist
or
$ sudo nano /etc/cni/net.d/foobar.conflist

{
  "cniVersion": "0.4.0",
  "name": "foobar",
  "plugins": [
     ...
     {
        "type": "dnsname",
        "domainName": "dns.podman",
        "capabilities": {
           "aliases": true
        }
     }
  ]
}





10) 

ROOTLESS MODE HELP.
ПОМОЩЬ В РЕЖИМЕ БЕЗ КОРНЕЙ.

$ sudo usermod --add-subuids 10000-75535 USERNAME
$ sudo usermod --add-subgids 10000-75535 USERNAME
# usermod --add-subuids 100000-165535 --add-subgids 100000-165535 username

Or just add the content manually.

$ echo USERNAME:10000:65536 >> /etc/subuid
$ echo USERNAME:10000:65536 >> /etc/subgid



REAL COMMAND.
НАСТОЯЩАЯ КОМАНДА.

$ sudo touch /etc/subgid && sudo touch /etc/subuid

$ sudo usermod --add-subuids 10000-65536 USERNAME
$ sudo usermod --add-subgids 10000-65536 USERNAME

/etc/subuid
USERNAME:100000:65536

/etc/subgid
USERNAME:100000:65536

$ sudo nano /etc/sysctl.conf

kernel.unprivileged_userns_clone=1

$ sudo sysctl -p

$ sudo loginctl enable-linger USERNAME

$ podman system migrate

$ sudo nano /etc/default/grub
GRUB_CMDLINE_LINUX_DEFAULT=".... systemd.unified_cgroup_hierarchy=1 --or-- cgroup_no_v1="all""
$ sudo grub-mkconfig -o /boot/grub/grub.cfg
$ reboot




Docker Compose.

Podman 3.0.0 introduces docker-compose support. 
This requires enabling a Podman socket which pretends to be docker; start the podman.service unit. 
For rootless containers, this requires you to start the podman.service user unit instead and set the DOCKER_HOST variable:

Pod man 3.0.0 вводит поддержку docker-compose. 
Для этого требуется включить сокет Podman, который выдает себя за docker; запустите модуль podman.service. 
Для контейнеров без корней это требует, чтобы вместо этого вы запустили пользовательский модуль podman.service и установили переменную DOCKER_HOST:

$ sudo apt install podman-docker -y

$ sudo ln -sf /var/run/podman/podman.sock /var/run/docker.sock
$ sudo systemctl enable --now podman.socket
$ systemctl --user enable --now podman.socket

$ nano ~/.bashrc
export DOCKER_HOST="unix:///run/user/$(id -u)/podman/podman.sock"

$ sudo nano /usr/lib/systemd/user/podman.service

[Install]
WantedBy=multi-user.target
Also=podman.socket

$ systemctl --user daemon-reload
$ systemctl --user start podman.service
$ systemctl --user enable podman.service

$ sudo nano /lib/systemd/system/podman.service

[Install]
WantedBy=multi-user.target
Also=podman.socket

$ sudo systemctl daemon-reload
$ sudo systemctl start podman.service
$ sudo systemctl enable podman.service

Containers terminate on shell logout
Контейнеры завершаются при выходе из оболочки

$ sudo loginctl enable-linger USERNAME



The administrator of a workstation can allow users to expose services on ports numbered lower than 1024, 
but they should understand the security implications. 
A regular user could, for example, run a web server on the official port 80 and make external users believe 
that it was configured by the administrator. This is acceptable on a workstation for testing, 
but might not be a good idea on a network-accessible development server, and definitely should not be done on production servers. 
To allow users to bind to ports down to port 80 run the following command.

Администратор рабочей станции может разрешить пользователям предоставлять услуги на портах с номерами ниже 1024, 
но они должны понимать последствия для безопасности. Обычный пользователь может, например, 
запустить веб-сервер на официальном порту 80 и заставить внешних пользователей поверить, 
что он был настроен администратором. Это приемлемо на рабочей станции для тестирования, 
но может оказаться не очень хорошей идеей на сервере разработки, доступном к сети, 
и определенно не должно выполняться на производственных серверах. 
Чтобы разрешить пользователям привязываться к портам вплоть до порта 80, выполните следующую команду.

$ nano /etc/sysctl.conf
net.ipv4.ip_unprivileged_port_start=80
$ sudo sysctl -p








11) Test Podman

podman help

Запуск и проверка cockpit

sudo systemctl status cockpit

Browser
https://ip:9090
The SSL certificate to self signed is CORRECT.

DNSNAME Test

$ sudo podman run -dt --name web --network foobar quay.io/libpod/alpine_nginx:latest
5139d65d22135e9ecab511559d863754550894a32285befd94dab231017048c2

$ sudo podman run -it --name client --network foobar quay.io/libpod/alpine_nginx:latest curl http://web.dns.podman/ 
podman rulez








