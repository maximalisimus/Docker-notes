

$ iptables -t таблица действие цепочка дополнительные_параметры

ПРАВИЛА И ДЕЙСТВИЯ

ACCEPT - разрешить прохождение пакета дальше по цепочке правил;
DROP - удалить пакет;
REJECT - отклонить пакет, отправителю будет отправлено сообщение, что пакет был отклонен;
LOG - сделать запись о пакете в лог файл;
QUEUE - отправить пакет пользовательскому приложению.

Правила могут проверять любые соответствия, например, 
по ip, по порту получателя или отправителя, заголовкам пакета и многому другому. 
Если пакет не подходит ни одному из правил, то к нему применяется действие по умолчанию, обычно ACCEPT.

Когда мы разобрались с правилами, можно вернутся обратно к цепочкам. 
Кроме перечисленных выше, есть еще две дополнительные цепочки правил:

prerouting - в эту цепочку пакет попадает перед обработкой iptables, 
	система еще не знает куда он будет отправлен, в input, output или forward;
postrouting - сюда попадают все проходящие пакеты, которые уже прошли цепочку forward.

ТАБЛИЦА:

raw - предназначена для работы с сырыми пакетами, пока они еще не прошли обработку;
mangle - предназначена для модификации пакетов;
nat - обеспечивает работу nat, если вы хотите использовать компьютер в качестве маршрутизатора;
filter - основная таблица для фильтрации пакетов, используется по умолчанию.

ДЕЙСТВИЕ:

-A - добавить правило в цепочку;
-С - проверить все правила;
-D - удалить правило;
-I - вставить правило с нужным номером;
-L - вывести все правила в текущей цепочке;
-S - вывести все правила;
-F - очистить все правила;
-N - создать цепочку;
-X - удалить цепочку;
-P - установить действие по умолчанию.

Дополнительные опции для правил:

-p - указать протокол, один из tcp, udp, udplite, icmp, icmpv6,esp, ah, sctp,
mh;
-s - указать ip адрес устройства-отправителя пакета;
-d - указать ip адрес получателя;
-i - входной сетевой интерфейс;
-o - исходящий сетевой интерфейс;
-j - выбрать действие, если правило подошло.




EXAMPLE 1:

iptables -L
iptables -L INPUT

ОЧИСТКА ПРАВИЛ

sudo iptables -F
sudo iptables -F Input

ПРАВИЛА ПО УМОЛЧАНИЮ

sudo iptables -p INPUT ACCEPT
sudo iptables -p OUTPUT ACCEPT
sudo iptables -p FORWARD DROP

БЛОКИРОВКА ПАКЕТОВ

iptables для блокировки всех входящих пакетов от 10.10.10.10:
sudo iptables -A INPUT -s 10.10.10.10 -j DROP

А теперь исходящие пакеты на этот же адрес:
sudo iptables -A OUTPUT -s 10.10.10.10 -j DROP

Блокировка диапазона ip:
sudo iptables -A INPUT -s 10.10.10.0/24 -j DROP

Расширенный вариант маски:
sudo iptables -A INPUT -s 10.10.10.0/255.255.255.0 -j DROP

Также вы можете заблокировать все входящие соединения ssh:
sudo iptables -A INPUT -p tcp --dport ssh -s 10.10.10.10 -j DROP

СОХРАНИТЬ ПРАВИЛА IPTABLES

sudo /sbin/iptables-save

А в Red Hat или CentOS:

sudo /sbin/service iptables save

УДАЛИТЬ ПРАВИЛА IPTABLES

iptables -D FORWARD -i wg0 -j ACCEPT;
iptables -t nat -D POSTROUTING -o enp0s3 -j MASQUERADE;
ip6tables -D FORWARD -i wg0 -j ACCEPT;
ip6tables -t nat -D POSTROUTING -o enp0s3 -j MASQUERADE







EXAMPLE 2:

НАСТРОЙКА ПРОХОЖДЕНИЯ ПАКЕТОВ

Сначала мы рассмотрим как разрешить прохождение пакетов через маршрутизатор.
Для этого в брандмауэре есть цепочка FORWARD.
По умолчанию для всех пакетов применяется правило DROP.
Сначала разрешим инициализацию новых соединений, проходящих от eth0 до eth1. 
Они имеют тип contrack и представлены пакетом SYN:

sudo iptables -A FORWARD -i eth0 -o eth1 -p tcp --syn --dport 80 -m conntrack --ctstate NEW -j ACCEPT

Действие ACCEPT означает, что мы разрешаем это соединение.
Но это правило разрешает только первый пакет, а нам нужно пропускать любой следующий трафик в обоих направлениях для этого порта (80).
Поэтому добавим правила для ESTABLIHED и RLEATED:

sudo iptables -A FORWARD -i eth0 -o eth1 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
sudo iptables -A FORWARD -i eth1 -o eth0 -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

Дальше явно установим что наша политика по умолчанию - DROP:

sudo iptables -P FORWARD DROP

МОДИФИКАЦИЯ ПАКЕТОВ В IPTABLES

Далее мы настроим правила, которые будут указывать как и куда нужно перенаправить пакеты, приходящие на порт 80.
Сейчас маршрутизатор может их пропускать в сеть, но он еще не знает куда.
Для этого нам нужно будет настроить две вещи - модификацию адреса назначения (Destination) DNAT 
и модификацию адреса отправителя (Source) SNAT.
Правила DNAT настраиваются в цепочке PREROUTING, в таблице NAT.
Эта операция изменяет адрес назначения пакета чтобы он достиг нужной нам цели, когда проходит между сетями.
Клиенты будут отправлять пакеты нашему маршрутизатору, и им не нужно знать топологию внутренней сети.
Пакет автоматически будет приходить нашему веб-серверу (192.168.1.2).

С помощью этого правила мы перенаправляем все пакеты, пришедшие на порт 80, к 192.168.1.2 опять же на порт 80:

sudo iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 80 -j DNAT --to-destination 192.168.1.2

Но это только половина работы.
Пакет будет иметь исходный адрес клиента, а значит будет пытаться отправить ответ ему.
Так как клиент ожидает получить ответ от маршрутизатора, то нормального TCP соединения не получиться.
Чтобы решить эту проблему нужно модифицировать адрес источника и заменить его на адрес маршрутизатора 192.168.1.1.
Тогда ответ придет маршрутизатору, а тот уже от своего имени передаст его в сеть.

sudo iptables -t nat -A POSTROUTING -o eth1 -p tcp --dport 80 -d 192.168.1.2 -j SNAT --to-source 192.168.1.1

Если вы хотите перенаправить трафик на порт 8080, то нужно указать его после ip адреса:

sudo iptables -t nat -A POSTROUTING -o eth1 -p tcp --dport 80 -d 192.168.1.2 -j SNAT --to-source 192.168.1.1:8080

Также может понадобиться выполнить проброс диапазона портов iptables, 
для этого просто укажите диапазон, например, 1000:2000:

sudo iptables -t nat -A POSTROUTING -o eth1 -p tcp --dport 1000:2000 -d 192.168.1.2 -j SNAT --to-source 192.168.1.1

После добавления этого правила можете проверять работу перенаправление портов iptables 
будет выполняться и все будет отправляться так, как нужно.

sudo service iptables-persistent save








#!/bin/bash

EXT_IP="xxx.xxx.xxx.xxx"  # внешний, реальный IP-адрес шлюза;
INT_IP="xxx.xxx.xxx.xxx"  # внутренний IP-адрес шлюза, в локальной сети;
EXT_IF="eth0"             # внешний интерфейс шлюза. Именно ему присвоен сетевой адрес $EXT_IP;
INT_IF="eth1"             # внутренний интерфейс шлюза, с адресом $INT_IP;
LAN_IP="$1"               # внутренний IP-адрес сервера.
SRV_PORT="$2"             # порт службы.

# Здесь желательно сделать проверку ввода данных, потому что операции достаточно серьёзные.

iptables -t nat -A PREROUTING --dst $EXT_IP -p tcp --dport $SRV_PORT -j DNAT --to-destination $LAN_IP
iptables -t nat -A POSTROUTING --dst $LAN_IP -p tcp --dport $SRV_PORT -j SNAT --to-source $INT_IP
iptables -t nat -A OUTPUT --dst $EXT_IP -p tcp --dport $SRV_PORT -j DNAT --to-destination $LAN_IP
iptables -I FORWARD 1 -i $EXT_IF -o $INT_IF -d $LAN_IP -p tcp -m tcp --dport $SRV_PORT -j ACCEPT




$ ./rules.sh 192.168.1.52 20,21





Перенаправление портов

Пусть $FAKE_PORT - обманный порт на внешнем интерфейсе шлюза, 
подключившись к которому мы должны попасть на адрес $LAN_IP и порт $SRV_PORT.


#!/bin/bash
EXT_IP="xxx.xxx.xxx.xxx"  # внешний, реальный IP-адрес шлюза;
INT_IP="xxx.xxx.xxx.xxx"  # внутренний IP-адрес шлюза, в локальной сети;
EXT_IF="eth0"             # внешний интерфейс шлюза. Именно ему присвоен сетевой адрес $EXT_IP;
INT_IF="eth1"             # внутренний интерфейс шлюза, с адресом $INT_IP;
FAKE_PORT="$1"            # Вначале передаём скрипту "неправильный" порт на внешнем интерфейсе,
LAN_IP="$2"               # внутренний IP-адрес сервера.
SRV_PORT="$3"             # порт службы.

# Здесь опять надо сделать проверку ввода данных, потому что операции всё ещё серьёзные.

iptables -t nat -A PREROUTING -d $EXT_IP -p tcp -m tcp --dport $FAKE_PORT -j DNAT --to-destination ${LAN_IP}:${SRV_PORT}
iptables -t nat -A POSTROUTING -d $LAN_IP -p tcp -m tcp --dport $SRV_PORT -j SNAT --to-source $INT_IP
iptables -t nat -A OUTPUT -d $EXT_IP -p tcp -m tcp --dport $SRV_PORT -j DNAT --to-destination $LAN_IP
iptables -I FORWARD 1 -i $EXT_IF -o $INT_IF -d $LAN_IP -p tcp -m tcp --dport $SRV_PORT -j ACCEPT























