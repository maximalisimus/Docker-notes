

ArchLinux:

Enable /etc/network/interfaces:

$ sudo nano /etc/NetworkManager/NetworkManager.conf
or
$ sudo nano /etc/NetworkManager/conf.d/managed.conf

[ifupdown]
managed=true



To stop NetworkManager from touching
/etc/resolv.conf
set main.dns=none with a configuration file in
/etc/NetworkManager/conf.d/:

/etc/NetworkManager/conf.d/dns.conf
[main]
dns=none

# systemctl stop resolvconf.service
# systemctl disable resolvconf.service



Debian to DNS uses on AdGuard or Pihole - please desable systemd-resolved.service:
sudo systemctl stop systemd-resolved.service
sudo systemctl disable systemd-resolved.service

And edit file /etc/systemd/resolved.conf to Google DNS

DNS=8.8.8.8
FallbackDNS=8.8.4.4


AND ONE DNS SERVER (local stub):
# ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf



/etc/systemd/resolved.conf.d/dns_servers.conf

[Resolve]
DNS=192.168.35.1 fd7b:d0bd:7a6e::1
Domains=~.

or

# сервера DNS от OpenDNS
nameserver 208.67.222.222
nameserver 208.67.220.220




/etc/nsswitch.conf





Next Debian.

su
apt update
apt upgrade
apt install sudo nano net-tools
nano /etc/sudoers

%sudo ALL=(ALL:ALL) ALL

# /usr/sbin/groupadd wheel
gpasswd -a ${USER} sudo
# id ${USER}
/sbin/reboot


$ nano /etc/sysctl.d/00-sysctl.conf
vm.swappiness=10



nano /etc/network/interfaces

allow-hotplug eth0
auto eth0
# iface eth0 inet dhcp
iface eth1 inet static
	address 192.168.0.120
	netmask 255.255.255.0
	gateway 192.168.0.1
	broadcast 192.168.0.255
	dns-nameservers 192.168.0.254 8.8.8.8
# pre-up ifconfig eth0 hw ether xx:xx:xx:xx:xx:xx
# pre-up ip link set eth0 address xx:xx:xx:xx:xx:xx

/etc/init.d/networking restart

sudo sysctl -w net.ipv4.ip_forward=1

sudo sysctl -p

nano /etc/sysctl.conf

net.ipv4.ip_forward=1
net.ipv4.conf.all.forwarding=1
net.ipv6.conf.all.forwarding=1
net.ipv6.conf.default.forwarding = 1
net.ipv4.conf.all.rp_filter = 1
net.ipv4.conf.default.proxy_arp = 1
net.ipv4.conf.all.proxy_arp=1
net.ipv4.conf.default.send_redirects = 1
net.ipv4.conf.all.send_redirects = 0




sudo systemctl stop apparmor && sudo systemctl disable apparmor && sudo systemctl mask apparmor
sudo systemctl unmask apparmor && sudo systemctl enable apparmor && sudo systemctl start apparmor




sudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release wget curl bash-completion net-tools



Locale and Language.

$ sudo locale-gen ru_RU.UTF-8
$ sudo nano /etc/environment
LANGUAGE=en_US.UTF-8
LANG=en_US.utf-8
LC_ALL=ru_RU.UTF-8
LC_COLLATE=ru_RU.UTF-8
LC_TIME=en_US.utf-8

Time Date.

$ timedatectl
$ sudo dpkg-reconfigure tzdata





curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -

curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

sudo apt-get update

sudo apt-get install docker-ce docker-ce-cli containerd.io

systemctl enable docker
systemctl start docker

# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Darwin-x86_64
# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Darwin-x86_64.sha256

# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Darwin-x86_64.tgz
# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Darwin-x86_64.tgz.sha256

# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Linux-x86_64
# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Linux-x86_64.sha256

# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Windows-x86_64.exe
# https://github.com/docker/compose/releases/download/1.29.1/docker-compose-Windows-x86_64.exe.sha256

# https://github.com/docker/compose/releases/download/1.29.1/run.sh
# https://github.com/docker/compose/archive/refs/tags/1.29.1.zip
# https://github.com/docker/compose/archive/refs/tags/1.29.1.tar.gz

wget "https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64"

sudo cp -f ./docker-compose-linux-x86_64 /usr/local/bin/docker-compose
rm -rf ./docker-compose-linux-x86_64
sudo chmod +x /usr/local/bin/docker-compose

sudo docker ps
sudo docker exec -i -t 6ee6223a3ce3 bash


sudo groupadd docker
sudo usermod -aG docker mikl






docker system prune will delete ALL dangling data 
(i.e. In order: containers stopped, volumes without containers and images with no containers). 
Even unused data, with -a option.

You also have:

docker container prune
docker image prune
docker network prune
docker volume prune

For unused images, use docker image prune -a (for removing dangling and ununsed images). 
Warning: 'unused' means "images not referenced by any container": be careful before using -a.




Portainer to 1.24

sudo docker volume create portainer_data

sudo docker run -d -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer

sudo docker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce

    


Deploying Portainer CE in Docker

Portainer Server Deployment
docker volume create portainer_data
docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce

Portainer Agent Only Deployment
Run the following command to deploy the Agent in your Docker host.
docker run -d -p 9001:9001 --name portainer_agent --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/volumes:/var/lib/docker/volumes portainer/agent



Deploying Portainer Business in Docker

Portainer Server Deployment
docker volume create portainer_data
docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ee:latest

Portainer Agent Only Deployment
Run the following command to deploy the Agent in your Docker host
docker run -d -p 9001:9001 --name portainer_agent --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/docker/volumes:/var/lib/docker/volumes portainer/agent:2.0.0





Portainer to 2.0.0

mkdir -p portainer-data && cd portainer-data
nano docker-compose.yml

version: "3"

volumes:
  portainer_data:

services:

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    ports:
      - 9000:9000
      - 8000:8000
    restart: always




Alternatives Portainer - Yacht.

docker run -d -p 8000:8000 -v /var/run/docker.sock:/var/run/docker.sock -v yacht:/config selfhostedpro/yacht

Login: admin@yacht.local
Password: pass

$ mkdir yacht && cd yacht && nano docker-compose.yml

version: '3'

volumes:
  yacht:

services:

  yacht:
    image: selfhostedpro/yacht
    container_name: yacht
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - yacht:/config
    ports:
      - 8000:8000
    restart: always
    
    
    



openssl rand -base64 48
If3VUCE75QBEbbhervInaHvfJcPC5/g3k4C5gli1hU6BTZfp3mOKTTOEjqhegl1l



https://download.nextcloud.com/server/releases/nextcloud-21.0.0.zip



Create a docker-compose.yml file similar to this:

version: '3'
services:
  app:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '81:81'
      - '443:443'
    environment:
      DB_MYSQL_HOST: "db"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "npm"
      DB_MYSQL_NAME: "npm"
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
  db:
    image: 'jc21/mariadb-aria:latest'
    environment:
      MYSQL_ROOT_PASSWORD: 'npm'
      MYSQL_DATABASE: 'npm'
      MYSQL_USER: 'npm'
      MYSQL_PASSWORD: 'npm'
    volumes:
      - ./data/mysql:/var/lib/mysql
    restart: unless-stopped


docker-compose up -d

http://127.0.0.1:81

Default Admin User:

Email:    admin@example.com
Password: changeme

Upgrading to new versions
docker-compose pull
docker-compose up -d






DuckDNS docker-compose.yml

---
version: "2.1"
services:
  duckdns:
    image: lscr.io/linuxserver/duckdns
    container_name: duckdns
    environment:
      - PUID=1000 #optional
      - PGID=1000 #optional
      - TZ=Europe/London
      - SUBDOMAINS=subdomain1,subdomain2
      - TOKEN=token
      - LOG_FILE=false #optional
    volumes:
      - /path/to/appdata/config:/config #optional
    restart: unless-stopped



cloudflare docker-compose.yml

version: '2'
services:
  cloudflare-ddns:
    image: oznu/cloudflare-ddns:latest
    restart: always
    environment:
      - API_KEY=xxxxxxx
      - ZONE=example.com
      - SUBDOMAIN=subdomain
      - PROXIED=false



version: "2"

services:

  bitwardenrs:
    image: bitwardenrs/server:latest
    container_name: bitwardenrs
    volumes:
      - BitWardenRS:/data/
    ports:
      - 8100:80
    restart: unless-stopped





Nextcloud.

nano docker-compose.yml

version: "3"
services:
  nclouddb:
    image: yobasystems/alpine-mariadb:latest
    container_name: nclouddb
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    restart: always
    volumes:
      - ./db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=nextcloud #Change This
      - MYSQL_PASSWORD=nextcloud #Change This
      - MYSQL_DATABASE=nextcloud
      - MYSQL_USER=nextcloud

  ncloud:
    image: nextcloud
    container_name: ncloud
    restart: always
    ports:
      - 1080:80
    volumes:
      - ./nextcloud:/var/www/html
    links:
      - nclouddb


sudo docker-compose up -d
sudo su
cd ./nextcloud/config/
nano config.php

'onlyoffice' => array ( 'verify_peer_off' => true,),
'allow_local_remote_servers' => true,

CTRL + O
CTRL + X
cd ../../
sudo docker-compose up -d --force-recreate




OnlyOffice.

nano docker-compose.yml

version: "3"
services:
  onlyoffice:
    image: onlyoffice/documentserver
    container_name: onlyoffice
    restart: always
    ports:
      - 1180:80
    volumes:
      - ./DocumentServer/logs:/var/log/onlyoffice
      - ./DocumentServer/data:/var/www/onlyoffice/Data
      - ./DocumentServer/lib:/var/lib/onlyoffice
      - ./DocumentServer/db:/var/lib/postgresql




If SSL Certificate to Self-Signed - then 
edit file container:
$ nano /etc/onlyoffice/documentserver/default.json

search string and edit:

	"rejectUnauthorized": false

And docker-container restart



Запуск ONLYOFFICE Docs с использованием HTTPS

Закрытый ключ (.key)
SSL-сертификат (.crt)

/app/onlyoffice/DocumentServer/data/certs/onlyoffice.key
/app/onlyoffice/DocumentServer/data/certs/onlyoffice.crt

Переключение ONLYOFFICE Docs на протокол HTTPS с помощью certbot
Проще всего переключить ONLYOFFICE Docs на протокол HTTPS, автоматически получив SSL-сертификаты от Let's Encrypt с помощью certbot.

Запустите Docker-контейнер ONLYOFFICE Docs, указав порты 80 и 443 и задав собственные значения для переменных:

sudo docker run -i -t -d -p 80:80 -p 443:443 \
    -e LETS_ENCRYPT_DOMAIN=yourdomain.com -e LETS_ENCRYPT_MAIL=email@example.com  onlyoffice/documentserver

Где:

LETS_ENCRYPT_DOMAIN - доменное имя, используемое для сертификата.
LETS_ENCRYPT_MAIL - адрес электронной почты, используемый для регистрации и восстановления.

Сертификат, подписанный Центром Сертификации letsencrypt.org, будет автоматически сгенерирован и установлен на ваш сервер. 
Теперь инсталляция ONLYOFFICE Docs должна быть доступна по адресу https://yourdomain.com.


Генерация самоподписанных сертификатов

ШАГ 1: Создайте закрытый ключ сервера
openssl genrsa -out onlyoffice.key 2048
ШАГ 2: Создайте запрос подписи сертификата (CSR)
openssl req -new -key onlyoffice.key -out onlyoffice.csr
ШАГ 3: Подпишите сертификат с помощью закрытого ключа и CSR
openssl x509 -req -days 365 -in onlyoffice.csr -signkey onlyoffice.key -out onlyoffice.crt
Вы только что сгенерировали SSL-сертификат со сроком действия 365 дней.

Усиление безопасности сервера
В этом разделе приводятся инструкции по усилению безопасности вашего сервера.

Для этого необходимо сгенерировать параметры Диффи-Хеллмана (DHE), обеспечивающие более высокую стойкость.

openssl dhparam -out dhparam.pem 2048

Установка SSL-сертификатов

Из четырех ранее сгенерированных файлов на сервер onlyoffice необходимо установить файлы onlyoffice.key, onlyoffice.crt и dhparam.pem. 
Файл CSR не требуется, но убедитесь, что вы создали его резервную копию (на случай, если он вам снова понадобится).

По умолчанию приложение onlyoffice настроено для поиска SSL-сертификатов в каталоге /var/www/onlyoffice/Data/certs. 
Этот путь можно изменить, используя параметры настройки SSL_KEY_PATH, SSL_CERTIFICATE_PATH и SSL_DHPARAM_PATH.

Путь /var/www/onlyoffice/Data/ - это путь к хранилищу данных. 
Вам надо создать папку с именем certs в каталоге /app/onlyoffice/DocumentServer/data/ и скопировать файлы в нее, 
а также в качестве меры безопасности необходимо изменить права доступа к файлу onlyoffice.key, 
чтобы он был доступен на чтение только владельцу.

mkdir -p /app/onlyoffice/DocumentServer/data/certs
cp onlyoffice.key /app/onlyoffice/DocumentServer/data/certs/
cp onlyoffice.crt /app/onlyoffice/DocumentServer/data/certs/
cp dhparam.pem /app/onlyoffice/DocumentServer/data/certs/
chmod 400 /app/onlyoffice/DocumentServer/data/certs/onlyoffice.key
И перезапустите Docker-контейнер:

sudo docker restart {{DOCUMENT_SERVER_ID}}

Остался всего один шаг, чтобы обеспечить безопасный доступ к приложению.

Доступные параметры настройки

Флаг `--env-file` в параметрах команды docker run позволяет задать все необходимые переменные среды в одном файле. 
Так можно избежать написания потенциально длинной команды docker run.

ONLYOFFICE_HTTPS_HSTS_ENABLED: Дополнительный параметр настройки для отключения HSTS (HTTP Strict Transport Security). Применяется только в тех случаях, когда используется SSL. По умолчанию задано значение true.
ONLYOFFICE_HTTPS_HSTS_MAXAGE: Дополнительный параметр настройки для задания параметра max-age HSTS в конфигурации виртуального хоста NGINX для onlyoffice. Применяется только в тех случаях, когда используется SSL. По умолчанию задано значение 31536000.
SSL_CERTIFICATE_PATH: Путь к используемому SSL-сертификату. По умолчанию задано значение /var/www/onlyoffice/Data/certs/tls.crt.
SSL_KEY_PATH: Путь к закрытому ключу SSL-сертификата. По умолчанию задано значение /var/www/onlyoffice/Data/certs/tls.key.
SSL_DHPARAM_PATH: Путь к параметру Диффи-Хеллмана. По умолчанию задано значение /var/www/onlyoffice/Data/certs/dhparam.pem.
SSL_VERIFY_CLIENT: Включение проверки сертификатов клиента с помощью файла CA_CERTIFICATES_PATH file. По умолчанию задано значение false.
DB_TYPE: Тип базы данных. Поддерживаются значения postgres, mariadb или mysql. По умолчанию задано значение postgres.
DB_HOST: IP-адрес или имя хоста, на котором запущен сервер базы данных.
DB_PORT: Номер порта сервера базы данных.
DB_NAME: Имя базы данных, которая должна создаваться при запуске образа.
DB_USER: Имя нового пользователя с правами суперпользователя для учетной записи базы данных.
DB_PWD: Пароль, заданный для учетной записи базы данных.
AMQP_URI: AMQP URI для подключения к серверу менеджера сообщений.
AMQP_TYPE: Тип менеджера сообщений. Поддерживаются значения rabbitmq или activemq. По умолчанию задано значение rabbitmq.
REDIS_SERVER_HOST: IP-адрес или имя хоста, на котором запущен Redis.
REDIS_SERVER_PORT: Номер порта сервера Redis.
NGINX_WORKER_PROCESSES: Определяет число рабочих процессов NGINX.
NGINX_WORKER_CONNECTIONS: Задаёт максимальное число соединений, которые одновременно может открыть рабочий процесс NGINX.
JWT_ENABLED: Управляет включением валидации посредством JSON веб-токена ONLYOFFICE Docs.По умолчанию задано значение false.
JWT_SECRET: Определяет секретный ключ для валидации JSON веб-токена при запросе к ONLYOFFICE Docs. По умолчанию задано значение secret.
JWT_HEADER: Определяет HTTP-заголовок, который будет использоваться для отправки JSON веб-токена. По умолчанию задано значение Authorization.
JWT_IN_BODY: Управляет включением валидации посредством токена в теле запроса к ONLYOFFICE Docs. По умолчанию задано значение false.
USE_UNAUTHORIZED_STORAGE: Задайте значение true при использовании самозаверенных сертификатов для вашего хранилища, например, Nextcloud. По умолчанию задано значение false.
GENERATE_FONTS: Когда задано значение true, заново генерирует список шрифтов, эскизы шрифтов и т.д. при каждом запуске. По умолчанию задано значение true.
METRICS_ENABLED: Управляет включением StatsD для ONLYOFFICE Docs. По умолчанию задано значение false.
METRICS_HOST: Определяет хост StatsD. По умолчанию задано значение localhost.
METRICS_PORT: Определяет порт StatsD. По умолчанию задано значение 8125.
METRICS_PREFIX: Определяет префикс метрик StatsD для серверных служб. По умолчанию задано значение ds..
LETS_ENCRYPT_DOMAIN: Определяет домен для сертификата Let's Encrypt.
LETS_ENCRYPT_MAIL: Определяет почтовый адрес администратора домена для сертификата Let's Encrypt.






mkdir searx && cd searx
nano docker-compose.yml

version: '2.3'

services:
  searx:
    container_name: searx
    image: angristan/searx:latest
    restart: always
    ports:
      - "8585:8888"
    environment:
      - IMAGE_PROXY=true
      - BASE_URL=http://192.168.0.120:8585
      - UID=1000
      - GID=1000
      


Whogle.

docker-cli:

docker run --publish 5000:5000 --detach --name whoogle-search benbusby/whoogle-search:latest

docker run --publish 5000:5000 --detach --name whoogle-search \
  -e WHOOGLE_USER=username \
  -e WHOOGLE_PASS=password \
  -e WHOOGLE_PROXY_USER=username \
  -e WHOOGLE_PROXY_PASS=password \
  -e WHOOGLE_PROXY_TYPE=socks5 \
  -e WHOOGLE_PROXY_LOC=ip \
  whoogle-search:1.0


mkdir whoogle && cd whoogle
nano docker-compose.yml

docker-compose.yml
---
version: '2'
services:
	whoogle:
		image: benbusby/whoogle-search:latest
		container_name: whoogle
		ports:
			- 5000:5000
		restart: unless-stopped



Variable                Description
WHOOGLE_DOTENV          Load environment variables in whoogle.env
WHOOGLE_USER            The username for basic auth. WHOOGLE_PASS must also be set if used.
WHOOGLE_PASS            The password for basic auth. WHOOGLE_USER must also be set if used.
WHOOGLE_PROXY_USER      The username of the proxy server.
WHOOGLE_PROXY_PASS      The password of the proxy server.
WHOOGLE_PROXY_TYPE      The type of the proxy server. Can be "socks5", "socks4", or "http".
WHOOGLE_PROXY_LOC       The location of the proxy server (host or ip).
EXPOSE_PORT             The port where Whoogle will be exposed.
HTTPS_ONLY              Enforce HTTPS. (See here)
WHOOGLE_ALT_TW          The twitter.com alternative to use when site alternatives are enabled in the config.
WHOOGLE_ALT_YT          The youtube.com alternative to use when site alternatives are enabled in the config.
WHOOGLE_ALT_IG          The instagram.com alternative to use when site alternatives are enabled in the config.
WHOOGLE_ALT_RD          The reddit.com alternative to use when site alternatives are enabled in the config.
WHOOGLE_ALT_TL          The Google Translate alternative to use. This is used for all "translate ____" searches.

Variable                Description
WHOOGLE_DOTENV          Загружать переменные среды в whoogle.env
WHOOGLE_USER            Имя пользователя для базовой авторизации. WHOOGLE_PASS также должен быть установлен, если используется.
WHOOGLE_PASS            Пароль для базовой авторизации. WHOOGLE_USER также должен быть установлен, если используется.
WHOOGLE_PROXY_USER      Имя пользователя прокси-сервера.
WHOOGLE_PROXY_PASS      Пароль прокси-сервера.
WHOOGLE_PROXY_TYPE      Тип прокси-сервера. Может быть "socks5", "socks4", или "http".
WHOOGLE_PROXY_LOC       Местоположение прокси-сервера (хост или ip).
EXPOSE_PORT             Порт, на котором будет доступен Whoogle.
HTTPS_ONLY              Применяйте HTTPS. (Смотрите здесь)
WHOOGLE_ALT_TW          В twitter.com альтернатива для использования, когда в конфигурации включены альтернативные варианты сайта.
WHOOGLE_ALT_YT          В youtube.com альтернатива для использования, когда в конфигурации включены альтернативные варианты сайта.
WHOOGLE_ALT_IG          В instagram.com альтернатива для использования, когда в конфигурации включены альтернативные варианты сайта.
WHOOGLE_ALT_RD          В reddit.com альтернатива для использования, когда в конфигурации включены альтернативные варианты сайта.
WHOOGLE_ALT_TL          Альтернатива Google Translate для использования. Это используется для всех поисковых запросов "перевести ____".

Config Environment Variables

Variable                            Description
WHOOGLE_CONFIG_DISABLE              Hide config from UI and disallow changes to config by client
WHOOGLE_CONFIG_COUNTRY              Filter results by hosting country
WHOOGLE_CONFIG_LANGUAGE             Set interface language
WHOOGLE_CONFIG_SEARCH_LANGUAGE      Set search result language
WHOOGLE_CONFIG_BLOCK                Block websites from search results (use comma-separated list)
WHOOGLE_CONFIG_THEME                Set theme mode (light, dark, or system)
WHOOGLE_CONFIG_SAFE                 Enable safe searches
WHOOGLE_CONFIG_ALTS                 Use social media site alternatives (nitter, invidious, etc)
WHOOGLE_CONFIG_TOR                  Use Tor routing (if available)
WHOOGLE_CONFIG_NEW_TAB              Always open results in new tab
WHOOGLE_CONFIG_VIEW_IMAGE           Enable View Image option
WHOOGLE_CONFIG_GET_ONLY             Search using GET requests only
WHOOGLE_CONFIG_URL                  The root url of the instance (https://<your url>/)
WHOOGLE_CONFIG_STYLE                The custom CSS to use for styling (should be single line)

Variable                            Description
WHOOGLE_CONFIG_DISABLE              Скрыть конфигурацию из пользовательского интерфейса и запретить изменения конфигурации клиентом
WHOOGLE_CONFIG_COUNTRY              Фильтровать результаты по принимающей стране
WHOOGLE_CONFIG_LANGUAGE             Установить язык интерфейса
WHOOGLE_CONFIG_SEARCH_LANGUAGE      Установите язык результатов поиска
WHOOGLE_CONFIG_BLOCK                Блокировать веб-сайты из результатов поиска (используйте список, разделенный запятыми)
WHOOGLE_CONFIG_THEME                Установите режим темы (light, dark, or system)
WHOOGLE_CONFIG_SAFE                 Включить безопасный поиск
WHOOGLE_CONFIG_ALTS                 Используйте альтернативные сайты социальных сетей (nitter, invidious, etc)
WHOOGLE_CONFIG_TOR                  Используйте маршрутизацию Tor (если таковая имеется)
WHOOGLE_CONFIG_NEW_TAB              Всегда открывайте результаты в новой вкладке
WHOOGLE_CONFIG_VIEW_IMAGE           Включить опцию Просмотра изображения
WHOOGLE_CONFIG_GET_ONLY             Поиск только с использованием запросов GET
WHOOGLE_CONFIG_URL                  Корневой URL-адрес экземпляра (https://<your url>/)
WHOOGLE_CONFIG_STYLE                Пользовательский CSS, используемый для стилизации (должен быть однострочным)



Firefox (iOS)
Title: "Whoogle"
URL: http[s]://\<your whoogle url\>/search?q=%s





mkdir -p ./heimdall/config && cd ./heimdall
nano docker-compose.yml


---
version: "2.1"
services:
  heimdall:
    image: ghcr.io/linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Moscow
    volumes:
      - ./config:/config
    ports:
      - 8787:80
    restart: unless-stopped


sudo docker-compose up -d



cp ./config/nginx/site-confs/default ./ng-site-default
    volumes:
      - ./ssl/:/etc/openssl/
      - ./ng-site-default:/config/nginx/site-confs/default


nginx.conf - to primer:

server {
    listen 80;
    server_name docr.smmhub.ru;
    server_tokens off;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}
server {
    listen 443 ssl;
    server_name docr.smmhub.ru;
    server_tokens off;

    ssl_certificate /etc/letsencrypt/live/docr.smmhub.ru/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/docr.smmhub.ru/privkey.pem;
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    
    # ssl_certificate /etc/openssl/domain.crt;
	# ssl_certificate_key /etc/openssl/domain.key;
    # ssl_dhparam /etc/openssl/dhparam.pem;
    
    location / {
        root   /usr/share/nginx/html;
        index  index.html;
    }
}


openssl genrsa -out rootCA.key 2048
openssl req -x509 -new -key rootCA.key -days 10000 -out rootCA.crt
openssl genrsa -out domain.key 2048
openssl req -new -key domain.key -out domain.req
openssl x509 -req -in domain.req -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out domain.crt -days 5000
rm -rf domain.req
cat rootCA.crt domain.crt > server.crt

openssl rsa -in domain.key -out domain.nopass.key
openssl dhparam -out dhparam.pem 2048

wget https://github.com/FiloSottile/mkcert/releases/download/v1.4.3/mkcert-v1.4.3-linux-amd64
sudo cp mkcert-v1.4.3-linux-amd64 /usr/local/bin/mkcert
rm -rf mkcert-v1.4.3-linux-amd64
sudo chmod +x /usr/local/bin/mkcert
mkcert -key-file key.pem -cert-file cert.pem -p12-file pks.p12 warden.vps.com "*.wrden.vps.com" localhost 127.0.0.1


sudo a2enmod headers
sudo a2enmod ssl
sudo a2enmod proxy
sudo a2enmod proxy_http
sudo a2enmod proxy_balancer
sudo a2enmod lbmethod_byrequests

sudo systemctl restart apache2

<VirtualHost *:80>
 ProxyPreserveHost On

 ProxyPass / http://127.0.0.1:8080/
 ProxyPassReverse / http://127.0.0.1:8080/
</VirtualHost>

sudo nano /etc/apache2/sites-enabled/000-default.conf

<VirtualHost *:443>
    
    SSLEngine on
    SSLCertificateFile /etc/ssl/domain.crt
    SSLCertificateKeyFile /etc/ssl/domain.key
    SSLCACertificateFile /etc/ssl/rootCA.crt
    
    ProxyPreserveHost On
    ProxyPass / http://localhost:8005/
    ProxyPassReverse / http://localhost:8005/
</VirtualHost>

/usr/local/share/ca-certificates/
sudo update-ca-certificates
sudo update-ca-trust


sudo apt-get install libnss3-tools
sudo openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /home/mikl/ssl/localhost.key -out /home/mikl/ssl/localhost.crt -config /home/mikl/ssl/openssl.cnf
mkdir -p $HOME/.pki/nssdb
certutil -d sql:$HOME/.pki/nssdb -A -t "P,," -n localhost.crt -i /home/mikl/ssl/localhost.crt



mkdir -p ~/nginx_proxy/ssl && cd ~/nginx_proxy/ssl
openssl req -newkey rsa:2048 -nodes -keyout domain.key -out domain.csr
openssl x509 -signkey domain.key -in domain.csr -req -days 365 -out domain.crt
or one command:
openssl req -newkey rsa:2048 -nodes -keyout domain.key -x509 -days 365 -out domain.crt

For Android:
openssl x509 -in domain.crt -inform PEM -outform DER -out ca-cert.crt
openssl pkcs12 -export -out private.p12 -inkey domain.key -in domain.crt -certfile site.ca-bundle
openssl pkcs12 -export -out private.pfx -inkey domain.key -in domain.crt -certfile site.ca-bundle

sudo nano /etc/nginx/conf.d/proxy_ssl.conf

server {
  listen 8443;
  ssl on;
  ssl_certificate /home/mikl/nginx_proxy/ssl/domain.crt;
  ssl_certificate_key /home/mikl/nginx_proxy/ssl/domain.key;
  ssl_dhparam /etc/ssl/dhparam.pem;
  location / {
     proxy_pass http://192.168.0.120:8005;
  }
}

sudo systemctl restart nginx


docker run -d --name nginx -p 80:80 -v /path/to/nginx/config/default.conf:/etc/nginx/conf.d/default.conf nginx


nano docker-compose.yml
nginx-proxy:


version: '3'

services:
  memcached:
    image: memcached:latest

  nginxgogs:
    image: nginx:latest
    links:
      - memcached:memcached
    container_name: nginx-gogs
    restart: unless-stopped
    ports:
      - "8443:443"
    volumes:
      - ./nginx/conf.d/:/etc/nginx/conf.d
      - ./ssl:/etc/ssl/
    networks:
      - nginxproxy

networks:
  nginxproxy:
    driver: bridge


sudo docker-compose up -d


------------------------------------

JDownloader 2.

version: 2
services:
  jdownloader-2:
    image: jlesage/jdownloader-2
    ports:
      - 5800:5800
    volumes:
      - /srv/dev-disk-by-label-Files/Config/JDownloader-2:/config:rw
      - /srv/dev-disk-by-label-Files/YouTube:/output:rw
      


Ports
Port	Mapping to host	Description
5800	Mandatory	Port used to access the application’s GUI via the web interface.
5900	Optional	Port used to access the application’s GUI via the VNC protocol. Optional if no VNC client is used.
3129	Optional	Port used by MyJDownloader mobile applications and browser extensions to establish a direct connect to the JDownloader Docker container instance. Port needs to be exposed only if MyJDownloader is enabled and configured in Direct Connection mode. NOTE: Since this port is being reported to the MyJDownloader online service, the port mapped on the host side must be the same (i.e. 3129).


That’s it. Once you have your Stack configured, you can click the “Deploy the Stack” button and wait for the container to deploy.

Once the container has deployed, you can open your browser and go to http://your-server-ip:5800 and start downloading whatever you’d like to download.


----------------------------------------

AdGuard.


---
version: "2"
services:
  adguardhome:
    image: adguard/adguardhome
    container_name: adguardhome
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 67:67/udp
      - 68:68/tcp
      - 68:68/udp
      - 853:853/tcp
      - 80:80/tcp #change this to something like 81:80 if port 80 is already in use
      - 3000:3000/tcp
    volumes:
      - /srv/dev-disk-by-label-Files/config/AdGuard1/workdir:/opt/adguardhome/work
      - /srv/dev-disk-by-label-Files/config/AdGuard1/confdir:/opt/adguardhome/conf
    restart: unless-stopped


---
version: "3"
services:
  adguardhome:
    image: adguard/adguardhome
    restart: unless-stopped
    volumes:
      - ./work:/opt/adguardhome/work
      - ./conf:/opt/adguardhome/conf
    ports:
      - 53:53/tcp # 10.66.66.1:
      - 53:53/udp # 10.66.66.1:
      - 67:67/udp
      - 68:68/tcp
      - 68:68/udp
      - 3080:80/tcp
      - 3443:443/tcp
      - 853:853/tcp
      - 3123:3000/tcp
      - 5449:5443/tcp
    network_mode: "bridge"


Deactivate DNSStubListener and update the DNS server address. Create a new file, 
/etc/systemd/resolved.conf.d/adguardhome.conf (creating the /etc/systemd/resolved.conf.d 
directory if needed) and add the following content to it:

# /etc/systemd/resolved.conf.d/adguardhome.conf
[Resolve]
DNS=127.0.0.1
DNSStubListener=no

Specifying 127.0.0.1 as the DNS server address is necessary because otherwise 
the nameserver will be 127.0.0.53 which doesn't work without DNSStubListener.

Activate a new resolv.conf file:

mv /etc/resolv.conf /etc/resolv.conf.backup
ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf

Stop DNSStubListener:

systemctl reload-or-restart systemd-resolved



---------------------------------------------------------------------------------------------------------------------



Fixing noexec
Now open an SSH program like Putty and login to your server using root.

Type:

nano /etc/openmediavault/config.xml

Then do a search for “mntent”

You should be brought to a section that is a different color because it is commented out. Use your arrow keys to press down until you get to the next section and look for the “<opts>” line and remove the “noexec” option from that line. Then press CTRL+X and then press Y to confirm.

That will bring you back to the main screen of your Putty program. While you’re there, type this:

omv-salt deploy run fstab

Press Enter on your keyboard. It will look like nothing happened and that’s fine. Now type in:

reboot

And then press Enter on your keyboard.

Once the system has rebooted, you can log in to the server via Putty again using root and type in:

cat /proc/mounts

Then look for your hard drives (sda1 or sdb1) and make sure there is no “noexec” in any of the lines associated with your hard drives.

Create Shares
You’ll need to go your OpenMediaVault user interface and click “Shared Folders”

Create each of the following:

Config
Movies
TV
Music
The “Config” folder is the only required folder. You can adjust your media folder names to fit your needs, but these are the defaults.

Make sure the permissions for each of the folders is set to “Everyone: read/write”.

Hover over any of the header titles (Name, Device, Relative Path, etc) and click the dropdown arrow. Then hover over “Columns” and check the box that says “Absolute Path” as we’ll need that later.

Then go to “SMB/CIFS”. Make sure this is set to “Enable” and then go to “Shares” in the blue bar.

Click “Add” for add each of the folders you created a moment ago and make sure the “Public” setting is set to “Only guests”.

Click “Save” after each one and once you have all your folders saved, you can click the “Apply” button in the yellow bar at the top of the page.

Post Continues After This Ad Break

Install Plex
Now go back to your OpenMediaVault server and login to the user interface.

Click on “OMV-Extras” and then click “Docker” in the blue bar. Then click the “Portainer” dropdown and click “Open web”.

Tell it that you want to control a local server. Then click on the section that says local.

Click “Containers”. Then click “Add container”

In a separate browser window, open this link: https://hub.docker.com/r/linuxserver/plex

In the “Create Container” window, fill in each of the fields based on the “docker-compose” information in the linuxserver/plex page.

You’ll need to open Putty again to get your UID and GID.

Under “Volumes” click “map additional volume” 1 time for each of the folders you created. Click the blue “bind” button for each one as well.

For the “Config” folder, you’ll type:

/config

in the “container” field. Then you’ll type the absolute path of that from the “Shared Folders” page on your OpenMediaVault page and append it with /Plex. Mine looks like this with all the folders added


Volumes:

container - BIND
host - writable

/config
/srv/dev-disk-by-label-Files/Config/Plex

/kids
/srv/dev-disk-by-label-Files/Kids

/movies
/srv/dev-disk-by-label-Files/Movies

/tv
/srv/dev-disk-by-label-Files/TV


ENV:

PUID=998
PGID=100
VERSION=docker
UMASK_SET=022


Next, go to the “Restart policy” tab and change it to “Unless stopped”.

That’s it. Now you can click the “Deploy the container” button right above the “Advanced container settings”

Once it has completed, you can go to http://your-server-ip:32400/web/index.html



---------------------------------------------------------------------------------------------------------------------

Jellyfin

========Docker Config========
 docker run -d \
   --name=jellyfin \
   -e PUID=1000 \
   -e PGID=1000 \
   -e TZ=America/New_York \
   -p 8096:8096 \
   -v REPLACEME/jellyfin/tv:/data/tvshows \
   -v REPLACEME/jellyfin/movies:/data/movies \
   --restart unless-stopped \
  ghcr.io/linuxserver/jellyfin



https://hub.docker.com/r/lsiodev/jellyfin

docker-compose (recommended):

---
version: "2.1"
services:
  jellyfin:
    image: lscr.io/linuxserver/jellyfin
    container_name: jellyfin
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - JELLYFIN_PublishedServerUrl=192.168.0.5 #optional
    volumes:
      - /path/to/library:/config
      - /path/to/tvseries:/data/tvshows
      - /path/to/movies:/data/movies
    ports:
      - 8096:8096
      - 8920:8920 #optional
      - 7359:7359/udp #optional
      - 1900:1900/udp #optional
    restart: unless-stopped
    

docker cli

---
docker run -d \
  --name=jellyfin \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=Europe/London \
  -e JELLYFIN_PublishedServerUrl=192.168.0.5 `#optional` \
  -p 8096:8096 \
  -p 8920:8920 `#optional` \
  -p 7359:7359/udp `#optional` \
  -p 1900:1900/udp `#optional` \
  -v /path/to/library:/config \
  -v /path/to/tvseries:/data/tvshows \
  -v /path/to/movies:/data/movies \
  --restart unless-stopped \
  lscr.io/linuxserver/jellyfin

Parameters

Container images are configured using parameters passed at runtime (such as those above). 
These parameters are separated by a colon and indicate <external>:<internal> respectively. 
For example, -p 8080:80 would expose port 80 from inside the container to be accessible from the host's IP on port 8080 outside the container.

-p 8096	Http webUI.
-p 8920	Optional - Https webUI (you need to set up your own certificate).
-p 7359/udp	Optional - Allows clients to discover Jellyfin on the local network.
-p 1900/udp	Optional - Service discovery used by DNLA and clients.
-e PUID=1000	for UserID - see below for explanation
-e PGID=1000	for GroupID - see below for explanation
-e TZ=Europe/London	Specify a timezone to use (e.g. Europe/London).
-e JELLYFIN_PublishedServerUrl=192.168.0.5	Set the autodiscovery response domain or IP address.
-v /config	Jellyfin data storage location. This can grow very large, 50gb+ is likely for a large collection.
-v /data/tvshows	Media goes here. Add as many as needed e.g. /data/movies, /data/tv, etc.
-v /data/movies	Media goes here. Add as many as needed e.g. /data/movies, /data/tv, etc.

Environment variables from files (Docker secrets)

You can set any environment variable from a file by using a special prepend FILE__.

As an example:

-e FILE__PASSWORD=/run/secrets/mysecretpassword
Will set the environment variable PASSWORD based on the contents of the /run/secrets/mysecretpassword file.

Umask for running applications
For all of our images we provide the ability to override the default umask settings for services started within the containers using the optional -e UMASK=022 setting. Keep in mind umask is not chmod it subtracts from permissions based on it's value it does not add. Please read up here before asking for support.

Optional Parameters
The official documentation for ports has additional ports that can provide auto discovery.

Service Discovery (1900/udp) - Since client auto-discover would break if this option were configurable, you cannot change this in the settings at this time. DLNA also uses this port and is required to be in the local subnet.

Client Discovery (7359/udp) - Allows clients to discover Jellyfin on the local network. A broadcast message to this port with "Who is Jellyfin Server?" will get a JSON response that includes the server address, ID, and name.

  -p 7359:7359/udp \
  -p 1900:1900/udp \


The official documentation for environmentals has additional environmentals that can provide additional configurability such as migrating to the native Jellyfin image.

User / Group Identifiers
When using volumes (-v flags) permissions issues can arise between the host OS and the container, we avoid this issue by allowing you to specify the user PUID and group PGID.

Ensure any volume directories on the host are owned by the same user you specify and any permissions issues will vanish like magic.

In this instance PUID=1000 and PGID=1000, to find yours use id user as below:

  $ id username
    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)

Via Watchtower auto-updater (only use if you don't remember the original parameters)

Pull the latest image at its tag and replace it with the same env variables in one run:

docker run --rm \
-v /var/run/docker.sock:/var/run/docker.sock \
containrrr/watchtower \
--run-once jellyfin

Building locally
If you want to make local modifications to these images for development purposes or just to customize the logic:

git clone https://github.com/linuxserver/docker-jellyfin.git
cd docker-jellyfin
docker build \
  --no-cache \
  --pull \
  -t lscr.io/linuxserver/jellyfin:latest .
The ARM variants can be built on x86_64 hardware using multiarch/qemu-user-static

docker run --rm --privileged multiarch/qemu-user-static:register --reset
Once registered you can define the dockerfile to use with -f Dockerfile.aarch64.



---------------------------------------------------------------------------------------------------------------------

docker-compose.yml  для  Emby:

version: "2.1"
services:
  emby:
    image: linuxserver/emby
    container_name: emby
    environment:
      - PUID=998
      - PGID=100
      - TZ=Europe/Malta
    volumes:
      - /путь до диска/backup/compose/emby/EmbyConfig:/config
      - /путь до диска:/ALL
    ports:
      - 8096:8096
      - 8920:8920 
    network_mode: host  
    restart: unless-stopped
 

docker-compose (recommended):

---
version: "2.1"
services:
  emby:
    image: lscr.io/linuxserver/emby
    container_name: emby
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
    volumes:
      - /path/to/library:/config
      - /path/to/tvshows:/data/tvshows
      - /path/to/movies:/data/movies
      - /opt/vc/lib:/opt/vc/lib #optional
    ports:
      - 8096:8096
      - 8920:8920 #optional
    devices:
      - /dev/dri:/dev/dri #optional
      - /dev/vchiq:/dev/vchiq #optional
      - /dev/video10:/dev/video10 #optional
      - /dev/video11:/dev/video11 #optional
      - /dev/video12:/dev/video12 #optional
    restart: unless-stopped


docker cli:

docker run -d \
  --name=emby \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=Europe/London \
  -p 8096:8096 \
  -p 8920:8920 `#optional` \
  -v /path/to/library:/config \
  -v /path/to/tvshows:/data/tvshows \
  -v /path/to/movies:/data/movies \
  -v /opt/vc/lib:/opt/vc/lib `#optional` \
  --device /dev/dri:/dev/dri `#optional` \
  --device /dev/vchiq:/dev/vchiq `#optional` \
  --device /dev/video10:/dev/video10 `#optional` \
  --device /dev/video11:/dev/video11 `#optional` \
  --device /dev/video12:/dev/video12 `#optional` \
  --restart unless-stopped \
  lscr.io/linuxserver/emby


Parameters

ontainer images are configured using parameters passed at runtime (such as those above). 
These parameters are separated by a colon and indicate <external>:<internal> respectively. 
For example, -p 8080:80 would expose port 80 from inside the container to be accessible from the host's IP on port 8080 outside the container.

-p 8096	Http webUI.
-p 8920	Https webUI (you need to setup your own certificate).
-e PUID=1000	for UserID - see below for explanation
-e PGID=1000	for GroupID - see below for explanation
-e TZ=Europe/London	Specify a timezone to use EG Europe/London
-v /config	Emby data storage location. This can grow very large, 50gb+ is likely for a large collection.
-v /data/tvshows	Media goes here. Add as many as needed e.g. /data/movies, /data/tv, etc.
-v /data/movies	Media goes here. Add as many as needed e.g. /data/movies, /data/tv, etc.
-v /opt/vc/lib	Path for Raspberry Pi OpenMAX libs optional.
--device /dev/dri	Only needed if you want to use your Intel or AMD GPU for hardware accelerated video encoding (vaapi).
--device /dev/vchiq	Only needed if you want to use your Raspberry Pi OpenMax video encoding (Bellagio).
--device /dev/video10	Only needed if you want to use your Raspberry Pi V4L2 video encoding.
--device /dev/video11	Only needed if you want to use your Raspberry Pi V4L2 video encoding.
--device /dev/video12	Only needed if you want to use your Raspberry Pi V4L2 video encoding.


Environment variables from files (Docker secrets)
You can set any environment variable from a file by using a special prepend FILE__.

As an example:

-e FILE__PASSWORD=/run/secrets/mysecretpassword
Will set the environment variable PASSWORD based on the contents of the /run/secrets/mysecretpassword file.

Umask for running applications
For all of our images we provide the ability to override the default umask settings 
for services started within the containers using the optional -e UMASK=022 setting. 
Keep in mind umask is not chmod it subtracts from permissions based on it's value it does not add. 
Please read up here before asking for support.

User / Group Identifiers
When using volumes (-v flags) permissions issues can arise between the host OS and the container, we avoid this issue by allowing you to specify the user PUID and group PGID.

Ensure any volume directories on the host are owned by the same user you specify and any permissions issues will vanish like magic.

In this instance PUID=1000 and PGID=1000, to find yours use id user as below:

  $ id username
    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)


 
---------------------------------------------------------------------------------------------------------------------



Ajenti-V:

https://hub.docker.com/r/linuxlife/ajenti-v

Быстрый запуск Докера:
1)mkdir -p /app/ajenticp/{backup,www}
2)docker run -p 80:80 -p 443:443 -p 7777:22 -p 8888:8000 -v /app/ajenticp/www:/www -v /app/ajenticp/backup:/backup -d linuxlife/ajenti-v:v0.23


ajenti-ajenti-v/nginx_for_wordpress/conf.txt

https://github.com/linuxlifepage/ajenti-ajenti-v/blob/main/nginx_for_wordpress/conf.txt

location ^~ /.well-known/acme-challenge {
    alias /var/www/dehydrated;
  }


# Global restrictions configuration file.
# Designed to be included in any server {} block.
location = /favicon.ico {
    log_not_found off;
    access_log off;
}
 
location = /robots.txt {
    allow all;
    log_not_found off;
    access_log off;
}
 
# Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~ /\. {
    deny all;
}
 
##################################################
# Deny access to any files with a .php extension in the uploads directory
# Works in sub-directory installs and also in multisite network
# Keep logging the requests to parse later (or to pass to firewall utilities such as fail2ban)
location ~* /(?:uploads|files)/.*\.php$ {
    deny all;
}


location / {
                # This is cool because no php is touched for static content.
                # include the "?$args" part so non-default permalinks doesn't break when using query string
 try_files $uri $uri/ /index.php?$args;
}
 
location ~ \.php$ {
    #NOTE: You should have "cgi.fix_pathinfo = 0;" in php.ini
    fastcgi_intercept_errors on;
    fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
 }






#HEADER CONFIGURATON!!!

 server {
    if ($host = vm1615856.2ssd.had.wf) {
        return 301 https://$host$request_uri;
    }


	server_name vm1615856.2ssd.had.wf;
    listen 80;
    return 404; # managed by Certbot


}


------------------------------------------------

Airsonic

https://hub.docker.com/r/linuxserver/airsonic

Architecture	Tag
x86-64	amd64-latest
arm64	arm64v8-latest
armhf	arm32v7-latest

Application Setup
Access WebUI at <your-ip>:4040.

Default user/pass is admin/admin

Extra java options can be passed with the JAVA_OPTS environment variable, eg -e JAVA_OPTS="-Xmx256m -Xms256m". For some reverse proxies, you may need to pass JAVA_OPTS=-Dserver.use-forward-headers=true for airsonic to generate the proper URL schemes.

Note that if you want to use Airsonic's Java jukebox player, then PGID will need to match the group of your sound device (e.g. /dev/snd).

docker-compose (recommended)
Compatible with docker-compose v2 schemas.

---
version: "2.1"
services:
  airsonic:
    image: ghcr.io/linuxserver/airsonic
    container_name: airsonic
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/London
      - CONTEXT_PATH=<URL_BASE> #optional
      - JAVA_OPTS=<options> #optional
    volumes:
      - </path/to/config>:/config
      - </path/to/music>:/music
      - </path/to/playlists>:/playlists
      - </path/to/podcasts>:/podcasts
      - </path/to/other media>:/media #optional
    ports:
      - 4040:4040
    devices:
      - /dev/snd:/dev/snd #optional
    restart: unless-stopped
docker cli
docker run -d \
  --name=airsonic \
  -e PUID=1000 \
  -e PGID=1000 \
  -e TZ=Europe/London \
  -e CONTEXT_PATH=<URL_BASE> `#optional` \
  -e JAVA_OPTS=<options> `#optional` \
  -p 4040:4040 \
  -v </path/to/config>:/config \
  -v </path/to/music>:/music \
  -v </path/to/playlists>:/playlists \
  -v </path/to/podcasts>:/podcasts \
  -v </path/to/other media>:/media `#optional` \
  --device /dev/snd:/dev/snd `#optional` \
  --restart unless-stopped \
  ghcr.io/linuxserver/airsonic
  
  

Parameters
Container images are configured using parameters passed at runtime (such as those above). These parameters are separated by a colon and indicate <external>:<internal> respectively. For example, -p 8080:80 would expose port 80 from inside the container to be accessible from the host's IP on port 8080 outside the container.

Parameter	Function
-p 4040	WebUI
-e PUID=1000	for UserID - see below for explanation
-e PGID=1000	for GroupID - see below for explanation
-e TZ=Europe/London	Specify a timezone to use EG Europe/London.
-e CONTEXT_PATH=<URL_BASE>	For setting url-base in reverse proxy setups.
-e JAVA_OPTS=<options>	For passing additional java options.
-v /config	Configuration file location.
-v /music	Location of music.
-v /playlists	Location for playlists to be saved to.
-v /podcasts	Location of podcasts.
-v /media	Location of other media.
--device /dev/snd	Only needed to pass your host sound device to Airsonic's Java jukebox player.


Environment variables from files (Docker secrets)
You can set any environment variable from a file by using a special prepend FILE__.

As an example:

-e FILE__PASSWORD=/run/secrets/mysecretpassword
Will set the environment variable PASSWORD based on the contents of the /run/secrets/mysecretpassword file.

Umask for running applications
For all of our images we provide the ability to override the default umask settings for services started within the containers using the optional -e UMASK=022 setting. Keep in mind umask is not chmod it subtracts from permissions based on it's value it does not add. Please read up here before asking for support.

User / Group Identifiers
When using volumes (-v flags) permissions issues can arise between the host OS and the container, we avoid this issue by allowing you to specify the user PUID and group PGID.

Ensure any volume directories on the host are owned by the same user you specify and any permissions issues will vanish like magic.

In this instance PUID=1000 and PGID=1000, to find yours use id user as below:

  $ id username
    uid=1000(dockeruser) gid=1000(dockergroup) groups=1000(dockergroup)
    
    

Docker Mods
Docker Mods Docker Universal Mods

We publish various Docker Mods to enable additional functionality within the containers. The list of Mods available for this image (if any) as well as universal mods that can be applied to any one of our images can be accessed via the dynamic badges above.

Support Info
Shell access whilst the container is running: docker exec -it airsonic /bin/bash
To monitor the logs of the container in realtime: docker logs -f airsonic
container version number
docker inspect -f '{{ index .Config.Labels "build_version" }}' airsonic
image version number
docker inspect -f '{{ index .Config.Labels "build_version" }}' ghcr.io/linuxserver/airsonic
Updating Info
Most of our images are static, versioned, and require an image update and container recreation to update the app inside. With some exceptions (ie. nextcloud, plex), we do not recommend or support updating apps inside the container. Please consult the Application Setup section above to see if it is recommended for the image.

Below are the instructions for updating containers:

Via Docker Compose
Update all images: docker-compose pull
or update a single image: docker-compose pull airsonic
Let compose update all containers as necessary: docker-compose up -d
or update a single container: docker-compose up -d airsonic
You can also remove the old dangling images: docker image prune
Via Docker Run
Update the image: docker pull ghcr.io/linuxserver/airsonic
Stop the running container: docker stop airsonic
Delete the container: docker rm airsonic
Recreate a new container with the same docker run parameters as instructed above (if mapped correctly to a host folder, your /config folder and settings will be preserved)
You can also remove the old dangling images: docker image prune
Via Watchtower auto-updater (only use if you don't remember the original parameters)
Pull the latest image at its tag and replace it with the same env variables in one run:

docker run --rm \
-v /var/run/docker.sock:/var/run/docker.sock \
containrrr/watchtower \
--run-once airsonic
You can also remove the old dangling images: docker image prune

Note: We do not endorse the use of Watchtower as a solution to automated updates of existing Docker containers. In fact we generally discourage automated updates. However, this is a useful tool for one-time manual updates of containers where you have forgotten the original parameters. In the long term, we highly recommend using Docker Compose.

Image Update Notifications - Diun (Docker Image Update Notifier)
We recommend Diun for update notifications. Other tools that automatically update containers unattended are not recommended or supported.
Building locally
If you want to make local modifications to these images for development purposes or just to customize the logic:

git clone https://github.com/linuxserver/docker-airsonic.git
cd docker-airsonic
docker build \
  --no-cache \
  --pull \
  -t ghcr.io/linuxserver/airsonic:latest .
The ARM variants can be built on x86_64 hardware using multiarch/qemu-user-static

docker run --rm --privileged multiarch/qemu-user-static:register --reset
Once registered you can define the dockerfile to use with -f Dockerfile.aarch64.


-------------------------------------------------

Resources:
 1. git-ftp command's repository: https://github.com/git-ftp/git-ftp
 2. git-ftp workflow:
     - git ftp init: upload your website the first time
     - git ftp catchup: sync your server with your local project for start use git + ftp
     - git ftp push: upload new changes
     

--------------------------------------------------

Docker Link Shortener

https://github.com/ajanvier/docker-polr.git

Examples at github:

docker run -p 8080:8080 \
    -e "DB_HOST=localhost" \
    -e "DB_DATABASE=polr" \
    -e "DB_USERNAME=polr" \
    -e "DB_PASSWORD=password" \
    -e "APP_ADDRESS=example.com" \
    -e "ADMIN_USERNAME=admin" \
    -e "ADMIN_PASSWORD=admin" \
    ajanvier/polr

please move to file .env.example on .env:
$ mv .env.example .env

Please to change on .env files:
# ADMIN_USERNAME, ADMIN_PASSWORD, ADMIN_EMAIL, APP_NAME, APP_PROTOCOL, APP_ADDRESS
$ nano .env

### Example:
# ADMIN_USERNAME=admin
# ADMIN_PASSWORD=password
# ADMIN_EMAIL=david@dbtechreviews.com
# APP_NAME=DBTech
# APP_PROTOCOL=https://
# APP_ADDRESS=dbtech.link
# POLR_ALLOW_ACCT_CREATION=false
# POLR_ACCT_ACTIVATION=false
# POLR_ACCT_CREATION_RECAPTCHA=false
# POLR_RECAPTCHA_SITE_KEY=
# POLR_RECAPTCHA_SECRET_KEY=
# POLR_BASE=62
#
# SETTING_PUBLIC_INTERFACE=false
# SETTING_SHORTEN_PERMISSION=false
# SETTING_INDEX_REDIRECT=
# SETTING_REDIRECT_404=
# SETTING_PASSWORD_RECOV=
# SETTING_AUTO_API=false
# SETTING_ANON_API=
# SETTING_ANON_API_QUOTA=
# SETTING_PSEUDORANDOM_ENDING=false
# SETTING_ADV_ANALYTICS=true
# SETTING_RESTRICT_EMAIL_DOMAIN=
# SETTING_ALLOWED_EMAIL_DOMAINS=
#
# POLR_ACCT_ACTIVATION=true
# Set to true to require activation by email (default: false)


Please to change docker-compose.yml files:
$ nano docker-compose.yml

version: 3.3
ports:
	- "9987:8080"







Docker registry.





























