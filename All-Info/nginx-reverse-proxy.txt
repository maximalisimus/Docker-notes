

sudo apt install certbot nginx python3-certbot-nginx

sudo rm -rf /etc/nginx/sites-enabled/default 

sudo nano /etc/nginx/sites-available/example

server {
	listen 80;
	server_name example.com;
	
	location /{
	  proxy_pass http://localhost:port/;
	  proxy_set_header X-Real-IP $remote_addr;
	  proxy_set_header X-Forwarded-Host $host;
	  proxy_set_header X-Forwarded-Port $server_port;
      proxy_set_header X-Forwarded-Proto https;
	}
	
	location /.well-known {
        alias /var/www/example.com;
    }
}

sudo mkdir -p /var/www/example.com

sudo ln -s /etc/nginx/sites-available/example /etc/nginx/sites-enabled/example

sudo systemctl status nginx
sudo systemctl restart nginx
sudo systemctl status nginx

sudo certbot --nginx 

sudo crontab -l

sudo crontab -e
nano


# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').
# 0 20 * * 1 certbot renew
0 21 7,28 * * certbot renew --rsa-key-size 4096 1>>/etc/cron_logs/cron_log.log 2>>/etc/cron_logs/cron_log.log


CTRL + o
CTRL + x

sudo crontab -l







HOWTO: A+ with all 100%’s on SSL Labs test using Nginx ...

https://community.letsencrypt.org/t/howto-a-with-all-100-s-on-ssl-labs-test-using-nginx-mainline-stable/55033


Example (RSA):
_ certbot --rsa-key-size 4096 -(other-arguments) _

You’ll need to use ciphers greater than or equal to 256 bit to get 100%

ssl_ciphers TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256: ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES256-GCM-SHA384;

Using Ciphers >=128 bit for best compatibility (Will get 90% in score)

ssl_ciphers TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:TLS_AES_128_CCM_8_SHA256:TLS_AES_128_CCM_SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

Use ECDH curve >= 256bit ( optional if you are not using ECDHE suite)

ssl_ecdh_curve secp384r1;

Entry level hsts (Just satisified A+)
add_header Strict-Transport-Security "max-age=63072000;";

Enable OCSP Stapling (Optional)
ssl_stapling on;
ssl_stapling_verify on;
ssl_trusted_certificate your cert path/letsencrypt-full-chain.pem; (the CA&Intermediate CA file for your cert)

Expect CT (Optional)
Few Usages:
testing only (With no report uri): add_header Expect-CT "max-age=0";
testing only (With report-uri) (Please follow the link above for report-uri’s usage) : add_header Expect-CT "max-age 0, report-uri https://{$subdomain}.report-uri.com/r/d/ct/reportOnly ";
enforce (go for short duration first): add_header Expect-CT "enforce, max-age 30, report-uri https://{$subdomain}.report-uri.com/r/d/ct/reportOnly ";

Add xframe (Optional)
add_header X-Frame-Options DENY;
Warning: This will deny all frame for your website. For example: WordPress’s update process page will not work properly (show blank.instead of actual progress)









If 413 Request Enity Too Large. <<!-- a padding to disable MSIE and Chrome friendly. -->

$ sudo nano /etc/nginx/nginx.conf


http {
	client_max_body_size 100M;
	client_body_buffer_size 256k;
	proxy_max_temp_file_size 0;

...

}

Эти строки устанавливают максимальный размер тела запроса, 
размер буфера тела запроса клиента и размер временного файла, 
создаваемого nginx при передаче данных.

Отредактируйте файл docker-compose.yml для вашего Bitwarden-сервера и в разделе environment добавьте следующую строку.

$ cd docker-config/bitwarden
$ nano docker-compose.yml

...
	environment:
		- WEBSOCKET_MAX_RECV=100
...

CTRL + o - Save file
CTRL + x - end exit

Проверьте конфигурацию nginx, чтобы убедиться, что ошибок нет:

$ sudo nginx -t

Перезапустите nginx, выполнив команду:

sudo systemctl restart nginx









